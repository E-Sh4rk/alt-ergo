(******************************************************************************)
(*                                                                            *)
(*     The Alt-Ergo theorem prover                                            *)
(*     Copyright (C) 2006-2013                                                *)
(*                                                                            *)
(*     Sylvain Conchon                                                        *)
(*     Evelyne Contejean                                                      *)
(*                                                                            *)
(*     Francois Bobot                                                         *)
(*     Mohamed Iguernelala                                                    *)
(*     Stephane Lescuyer                                                      *)
(*     Alain Mebsout                                                          *)
(*                                                                            *)
(*     CNRS - INRIA - Universite Paris Sud                                    *)
(*                                                                            *)
(*     This file is distributed under the terms of the Apache Software        *)
(*     License version 2.0                                                    *)
(*                                                                            *)
(*  ------------------------------------------------------------------------  *)
(*                                                                            *)
(*     Alt-Ergo: The SMT Solver For Software Verification                     *)
(*     Copyright (C) 2013-2018 --- OCamlPro SAS                               *)
(*                                                                            *)
(*     This file is distributed under the terms of the Apache Software        *)
(*     License version 2.0                                                    *)
(*                                                                            *)
(******************************************************************************)

(** Hashconsed strings

    This modules defines hashconsed strings. Hashconsing strings allow
    for more efficient comparison of strings, as well as smaller memory
    footprint, at the cost of slightly increased creation cost. *)


(** {1 Hashconsed strings} *)

type t
(** The type of hashconsed strings. *)

val make : string -> t
(** Create a hashconsed string. *)

val view : t -> string
(** View the contents of a hashconsed string. *)


(** {1 Ordering and Hash} *)

val equal : t -> t -> bool
(** Equality on hashconsed strings. *)

val compare : t -> t -> int
(** Comparison on hashconsed strings.
    NOTE: the comparison reflects a complete arbitrary order
          on hashconsed strings. In particular, this order is
          {b not} the alphabetical lexicographic order. *)

val hash : t -> int
(** Hash function on hashconsed strings. *)

module Set : Set.S with type elt = t
(** Sets of hashconsed strings *)

module Map : Map.S with type key = t
(** Maps of hashconsed strings. *)


(** {1 Misc} *)

val empty : t
(** The empty hashconsed string, equal to [make ""]. *)

val list_assoc : t -> (t * 'a) list -> 'a
(** Find the value associated to a hashconsed string in an
    association list.
    @raise Not_found if the hashconsed string does not belong to the list. *)

val fresh_string : unit -> string
(** A fresh string. Guaranteed to be different from other strings generated
    by {b this} function. *)

val is_fresh_string : string -> bool
(** Returns whether the string was generated by the
    {! fresh_string} function. *)

val is_fresh_skolem : string -> bool
(** Returns whether the given string is a skolem name generated. *)

